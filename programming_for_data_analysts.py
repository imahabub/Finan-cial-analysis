# -*- coding: utf-8 -*-
"""Programming for Data Analysts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J9wJBEmuMeM6BtXtajXV1N73jRE5h8VM
"""

!pip install tabula-py
!pip install jpype1

"""**Import Required Libraries**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tabula
from tabula.io import read_pdf
from tabula.io import convert_into
import warnings
warnings.filterwarnings('ignore')

"""**Load Excel dataset**"""

loan_data_excel = pd.read_excel('DEEPAK Loan Data.xlsx')



"""**Display first few rows of the Excel dataset**"""

loan_data_excel.head()

"""**Extract data from PDF**"""

loan_data_pdf = read_pdf('DEEPAK_Loans_Database_Table.pdf', pages='all')

tabula.convert_into("DEEPAK_Loans_Database_Table.pdf", "deepak_pdf_file.csv", output_format="csv", pages='all')

deepak_pdf = pd.read_csv('deepak_pdf_file.csv')

deepak_pdf.head()

"""**Combine Excel and PDF data (after converting the PDF into a DataFrame)**"""

loan_data_combined = pd.concat([loan_data_excel, deepak_pdf], ignore_index=True)

"""**Check the shape of the combined data**"""

loan_data_combined.shape

"""**Check for duplicates**"""

loan_data_combined.drop_duplicates(inplace=True)

"""**Check for missing values**"""

print(loan_data_combined.isnull().sum())

"""**1. Descriptive Statistics**"""

loan_data_combined.describe()

"""**2. Calculate total amount loaned**"""

total_loaned = loan_data_combined['LoanAmount'].sum()
print(f"Total amount loaned: {total_loaned}")

"""**3. Calculate average amount loaned**"""

average_loaned = loan_data_combined['LoanAmount'].mean()
print(f"Average amount loaned: {average_loaned}")

"""**4. Calculate average loan term**"""

average_term = loan_data_combined['Loan_Amount_Term'].mean()
print(f"Average loan term: {average_term} months")

"""**5. Group data by Loan_Status and Gender**"""

loan_status_gender = loan_data_combined.groupby(['Loan_Status', 'Gender']).size().unstack()

"""**Plotting the results**"""

loan_status_gender.plot(kind='bar', stacked=False)
plt.title("Loan Status by Gender")
plt.xlabel("Loan Status")
plt.ylabel("Number of Applicants")
plt.show()

"""**6. Find max and min loan amounts**"""

max_loan = loan_data_combined['LoanAmount'].max()
min_loan = loan_data_combined['LoanAmount'].min()
print(f"Maximum loan amount: {max_loan}, Minimum loan amount: {min_loan}")

"""**Plotting max and min loan amounts**"""

plt.bar(['Max Loan', 'Min Loan'], [max_loan, min_loan])
plt.title("Maximum and Minimum Loan Amounts")
plt.ylabel("Loan Amount")
plt.show()

"""**7. Percentage of self-employed people whose loans were approved**"""

approved_loans = loan_data_combined[loan_data_combined['Loan_Status'] == 'Y']
self_employed_approved = approved_loans[approved_loans['Self_Employed'] == 'Yes']

"""**Percentage calculation**"""

percentage_self_employed_approved = (len(self_employed_approved) / len(approved_loans)) * 100
print(f"Percentage of self-employed with approved loans: {percentage_self_employed_approved:.2f}%")

"""**Plotting the results**"""

labels = ['Self-Employed', 'Not Self-Employed']
sizes = [len(self_employed_approved), len(approved_loans) - len(self_employed_approved)]
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
plt.title("Self-Employed Loan Approval Rate")
plt.show()

"""**8. Income distribution of main applicants**"""

plt.figure(figsize=(10, 6))
sns.histplot(loan_data_combined['ApplicantIncome'], bins=30, kde=True)
plt.title('Income Distribution of Applicants')
plt.xlabel('Applicant Income')
plt.show()

"""**Average and standard deviation of income**"""

avg_income = loan_data_combined['ApplicantIncome'].mean()
std_income = loan_data_combined['ApplicantIncome'].std()
print(f"Average Income: {avg_income}, Standard Deviation of Income: {std_income}")

"""**9. Top 10 applicants by loan amount**"""

top_10_loans = loan_data_combined.nlargest(10, 'LoanAmount')
print(top_10_loans[['Loan_ID', 'ApplicantIncome', 'LoanAmount']])

"""**10. Property Area Distribution**"""

property_distribution = loan_data_combined['Property_Area'].value_counts()

"""**Plotting the distribution**"""

property_distribution.plot(kind='bar')
plt.title("Distribution of Property Areas")
plt.xlabel("Property Area")
plt.ylabel("Number of Applicants")
plt.show()

